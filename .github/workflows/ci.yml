name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  packages: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install frontend deps
        working-directory: ./frontend
        run: |
          npm ci

      - name: Lint and typecheck frontend
        working-directory: ./frontend
        run: |
          npm run lint
          npm run typecheck

      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm run build

      - name: Install backend deps
        working-directory: ./backend
        run: |
          npm ci

      - name: Lint and typecheck backend
        working-directory: ./backend
        run: |
          npm run lint || echo "Lint errors (non-blocking)"
          npm run typecheck

      - name: Build backend
        working-directory: ./backend
        run: |
          npm run build

      - name: Start Postgres for backend tests
        run: |
          docker run -d --name pg_test -e POSTGRES_DB=workflow_platform_test -e POSTGRES_USER=test_user -e POSTGRES_PASSWORD=test_password -p 5433:5432 postgres:16-alpine
          for i in {1..30}; do
            if docker exec pg_test pg_isready -U test_user -d workflow_platform_test; then echo "Postgres is ready"; break; else echo "Waiting for Postgres..."; sleep 2; fi
          done

      - name: Run backend tests (Jest)
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5433/workflow_platform_test
          NODE_ENV: test
        working-directory: ./backend
        run: |
          npm test -- --runInBand

      - name: Stop Postgres test container
        if: always()
        run: |
          docker rm -f pg_test || true

  docker:
    if: github.event_name == 'push'
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/ai-workflow-frontend:latest

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/ai-workflow-backend:latest

  e2e:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install backend deps
        working-directory: ./backend
        run: npm ci

      - name: Start backend server
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5433/workflow_platform_test
          NODE_ENV: test
          PORT: 3001
        run: |
          docker run -d --name pg_e2e -e POSTGRES_DB=workflow_platform_test -e POSTGRES_USER=test_user -e POSTGRES_PASSWORD=test_password -p 5433:5432 postgres:16-alpine
          for i in {1..30}; do
            if docker exec pg_e2e pg_isready -U test_user -d workflow_platform_test; then echo "Postgres is ready"; break; else echo "Waiting for Postgres..."; sleep 2; fi
          done
          npm run dev &
          echo $! > backend_pid.txt
          sleep 5

      - name: Install frontend deps
        working-directory: ./frontend
        run: npm ci

      - name: Install Playwright Browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
        run: npm run test:e2e

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report

      - name: Cleanup backend and Postgres
        if: always()
        run: |
          kill $(cat backend/backend_pid.txt) || true
          docker rm -f pg_e2e || true
